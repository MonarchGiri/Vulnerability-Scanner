from PyQt6.QtWidgets import QDialog, QVBoxLayout, QLabel, QLineEdit, QPushButton, QMessageBox, QComboBox, QFrame, QHBoxLayout, QSizePolicy, QSpacerItem
from PyQt6.QtCore import pyqtSignal, QTimer, Qt
from res.auth import Auth  # Ensure correct import
import qrcode
from qrcode.image.pil import PilImage
from io import BytesIO
from PyQt6.QtGui import QPixmap, QIcon

class LoginDialog(QDialog):
    login_successful = pyqtSignal(str)

    def __init__(self, parent=None, auth=None, create_account=False):
        super(LoginDialog, self).__init__(parent)
        self.auth = auth
        self.create_account = create_account  # Determine if creating an account
        self.verification_code = None
        self.totp_attempts = 0

        self.setWindowTitle('VanGuards Admin Account Setup' if self.create_account else 'VanGuards Admin Login')
        self.setMinimumSize(650, 700)  # Increase the minimum size for the dialog
        self.setWindowIcon(QIcon('icon.jpeg'))  # Set a window icon

        # Apply stylesheets for a modern look
        self.setStyleSheet("""
            QDialog {
                background-color: #f0f0f0;
                font-family: Arial, sans-serif;
            }
            QLabel {
                font-size: 14px;
                color: #333;
            }
            QLineEdit {
                padding: 8px;
                font-size: 14px;
                border: 1px solid #ccc;
                border-radius: 4px;
            }
            QPushButton {
                background-color: #4CAF50;
                color: white;
                font-size: 14px;
                padding: 10px 20px;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QComboBox {
                padding: 8px;
                font-size: 14px;
                border: 1px solid #ccc;
                border-radius: 4px;
            }
            QFrame {
                background-color: white;
                padding: 20px;
                border-radius: 8px;
            }
        """)

        # Main layout
        main_layout = QVBoxLayout(self)
        self.setLayout(main_layout)

        # Horizontal layout to separate form and QR code
        horizontal_layout = QHBoxLayout()
        main_layout.addLayout(horizontal_layout)

        # Form layout inside a frame
        form_frame = QFrame()
        form_layout = QVBoxLayout(form_frame)
        horizontal_layout.addWidget(form_frame, stretch=2)

        self.username_label = QLabel('Name:')
        form_layout.addWidget(self.username_label)
        self.username_input = QLineEdit()
        form_layout.addWidget(self.username_input)

        self.password_label = QLabel('Password:')
        form_layout.addWidget(self.password_label)
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.EchoMode.Password)
        form_layout.addWidget(self.password_input)

        self.email_label = QLabel('Email:')
        form_layout.addWidget(self.email_label)
        self.email_input = QLineEdit()
        form_layout.addWidget(self.email_input)

        self.verification_label = QLabel('Verification Code:')
        self.verification_label.setVisible(False)
        form_layout.addWidget(self.verification_label)
        self.verification_input = QLineEdit()
        self.verification_input.setVisible(False)
        form_layout.addWidget(self.verification_input)

        self.totp_label = QLabel('TOTP Code:')
        self.totp_label.setVisible(False)
        form_layout.addWidget(self.totp_label)
        self.totp_input = QLineEdit()
        self.totp_input.setVisible(False)
        form_layout.addWidget(self.totp_input)

        self.forgot_password_button = QPushButton('Forgot Password')
        self.forgot_password_button.setVisible(False)
        form_layout.addWidget(self.forgot_password_button)

        self.action_button = QPushButton('Create Account' if self.create_account else 'Login')
        form_layout.addWidget(self.action_button)
        self.action_button.clicked.connect(self.handle_action)

        if not self.create_account:
            self.email_label.setVisible(False)
            self.email_dropdown = QComboBox()
            self.email_dropdown.addItems(self.auth.get_all_emails())
            form_layout.insertWidget(3, self.email_dropdown)
            self.email_input.setVisible(False)
            self.username_label.setVisible(False)
            self.username_input.setVisible(False)
            self.password_label.setVisible(False)
            self.password_input.setVisible(False)

        # QR code layout
        qr_code_frame = QFrame()
        qr_code_layout = QVBoxLayout(qr_code_frame)
        horizontal_layout.addWidget(qr_code_frame, stretch=1, alignment=Qt.AlignmentFlag.AlignCenter)
        self.qr_code_label = QLabel()
        self.qr_code_label.setVisible(False)
        qr_code_layout.addWidget(self.qr_code_label, alignment=Qt.AlignmentFlag.AlignCenter)

        self.timer = QTimer(self)
        self.timer.timeout.connect(self.expire_code)
        self.code_expired = False

    def handle_action(self):
        if self.create_account:
            username = self.username_input.text()
            password = self.password_input.text()
            email = self.email_input.text()

            if not self.verification_code:
                if username and password and email:
                    if not self.auth.validate_email(email):
                        QMessageBox.warning(self, 'Error', 'Invalid email format.')
                        return
                    if not self.auth.validate_password(password):
                        QMessageBox.warning(self, 'Error', 'Password must be at least 8 characters long and include an uppercase letter, a lowercase letter, a number, and a special character.')
                        return
                    code = self.auth.generate_verification_code()
                    self.auth.send_verification_email(email, code, username)  # Pass the username here
                    self.auth.store_verification_code(email, code)
                    self.verification_code = code

                    QMessageBox.information(self, 'Verification', 'A verification code has been sent to your email.')
                    self.verification_label.setVisible(True)
                    self.verification_input.setVisible(True)
                    self.timer.start(300000)  # 5 minutes
                else:
                    QMessageBox.warning(self, 'Error', 'All fields are required.')
            else:
                verification_code = self.verification_input.text()
                if self.auth.verify_code(email, verification_code) and not self.code_expired:
                    if self.auth.add_user(username, password, email, role='admin'):
                        QMessageBox.information(self, 'Success', 'Admin account created successfully.')
                        self.setup_totp(email)
                    else:
                        QMessageBox.warning(self, 'Error', 'Username or email already exists. Please choose a different username or email.')
                        self.username_input.clear()
                        self.password_input.clear()
                        self.email_input.clear()
                        self.verification_input.clear()
                        self.username_input.setFocus()
                        self.verification_label.setVisible(False)
                        self.verification_input.setVisible(False)
                        self.verification_code = None
                        self.timer.stop()
                else:
                    QMessageBox.warning(self, 'Error', 'Invalid or expired verification code.')
        else:
            email = self.email_dropdown.currentText()
            if self.auth.is_totp_enabled(email):
                self.prompt_totp(email)
            else:
                self.setup_totp(email)

    def prompt_totp(self, email):
        self.email_label.setVisible(False)
        self.email_dropdown.setVisible(False)
        self.totp_label.setVisible(True)
        self.totp_input.setVisible(True)
        self.action_button.setText('Verify TOTP')
        self.action_button.clicked.disconnect()
        self.action_button.clicked.connect(lambda: self.verify_totp(email))

    def setup_totp(self, email):
        provisioning_uri = self.auth.setup_totp(email)
        img = qrcode.make(provisioning_uri, image_factory=PilImage)
        buffer = BytesIO()
        img.save(buffer)
        buffer.seek(0)
        pixmap = QPixmap()
        pixmap.loadFromData(buffer.read())

        self.qr_code_label.setPixmap(pixmap)
        self.qr_code_label.setVisible(True)
        self.adjustSize()  # Adjust the size of the dialog to fit the QR code
        QMessageBox.information(self, 'Setup TOTP', 'Scan the QR code with your TOTP app (e.g., Google Authenticator) and enter the code to complete setup.')
        self.totp_label.setVisible(True)
        self.totp_input.setVisible(True)
        self.action_button.setText('Verify TOTP')
        self.action_button.clicked.disconnect()
        self.action_button.clicked.connect(lambda: self.verify_totp(email))

    def verify_totp(self, email):
        totp_code = self.totp_input.text()
        if self.auth.verify_totp(email, totp_code):
            self.auth.enable_totp(email)
            username = self.auth.get_username_by_email(email)
            self.login_successful.emit(username)
            self.accept()
        else:
            self.totp_attempts += 1
            if self.totp_attempts >= 5:
                QMessageBox.warning(self, 'Error', 'Too many failed attempts. Please log in with your password and set up TOTP again.')
                self.show_password_login(email)
            else:
                QMessageBox.warning(self, 'Error', 'Invalid TOTP code. Please try again.')

    def show_password_login(self, email):
        self.email_label.setVisible(False)
        self.email_dropdown.setVisible(False)
        self.totp_label.setVisible(False)
        self.totp_input.setVisible(False)
        self.qr_code_label.setVisible(False)
        self.password_label.setVisible(True)
        self.password_input.setVisible(True)
        self.forgot_password_button.setVisible(True)
        self.action_button.setText('Login with Password')
        self.action_button.clicked.disconnect()
        self.action_button.clicked.connect(lambda: self.verify_password(email))
        self.forgot_password_button.clicked.connect(lambda: self.reset_password(email))

    def verify_password(self, email):
        password = self.password_input.text()
        if self.auth.validate_user(email, password):
            self.setup_totp(email)
        else:
            QMessageBox.warning(self, 'Error', 'Invalid password. Please try again.')

    def reset_password(self, email):
        code = self.auth.generate_verification_code()
        self.auth.send_verification_email(email, code)
        self.auth.store_verification_code(email, code)
        self.verification_code = code
        QMessageBox.information(self, 'Verification', 'A verification code has been sent to your email. Enter the code to reset your password.')
        self.prompt_reset_password(email)

    def prompt_reset_password(self, email):
        self.email_label.setVisible(False)
        self.email_dropdown.setVisible(False)
        self.password_label.setText('New Password:')
        self.password_label.setVisible(True)
        self.password_input.setVisible(True)
        self.verification_label.setVisible(True)
        self.verification_input.setVisible(True)
        self.action_button.setText('Reset Password')
        self.action_button.clicked.disconnect()
        self.action_button.clicked.connect(lambda: self.verify_reset_code(email))

    def verify_reset_code(self, email):
        verification_code = self.verification_input.text()
        new_password = self.password_input.text()
        if self.auth.verify_code(email, verification_code) and not self.code_expired:
            if self.auth.reset_password(email, new_password):
                QMessageBox.information(self, 'Success', 'Password reset successful. Please log in with your new password.')
                self.password_label.setVisible(False)
                self.password_input.setVisible(False)
                self.verification_label.setVisible(False)
                self.verification_input.setVisible(False)
                self.forgot_password_button.setVisible(False)
                self.action_button.setText('Login')
                self.action_button.clicked.disconnect()
                self.action_button.clicked.connect(self.handle_action)
            else:
                QMessageBox.warning(self, 'Error', 'Invalid password. Please ensure it meets the complexity requirements.')
        else:
            QMessageBox.warning(self, 'Error', 'Invalid or expired verification code.')

    def expire_code(self):
        self.code_expired = True
        self.verification_code = None
        self.timer.stop()
        QMessageBox.warning(self, 'Error', 'The verification code has expired.')
        self.verification_label.setVisible(False)
        self.verification_input.setVisible(False)

    def reject(self):
        # Override the reject method to emit a signal for manual close
        self.login_successful.emit("")  # Emit with an empty string to indicate a manual close
        super().reject()
