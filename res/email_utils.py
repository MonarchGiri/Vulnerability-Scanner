import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from email.mime.base import MIMEBase
from email import encoders
import ssl
from datetime import datetime

def send_verification_email(smtp_server, smtp_port, sender_email, receiver_email, email_password, subject, verification_code, name):
    try:
        # HTML template for verification email
        html_template = """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>Email Verification</title>
            <style>
                body {{
                    font-family: Arial, sans-serif;
                    line-height: 1.6;
                    color: #333;
                    max-width: 600px;
                    margin: auto;
                    padding: 20px;
                    border: 1px solid #ddd;
                    border-radius: 10px;
                    background-color: #f9f9f9;
                }}
                h2 {{
                    color: #0056b3;
                }}
                p {{
                    margin: 0 0 15px 0;
                }}
                .footer {{
                    text-align: center;
                    font-size: 0.9em;
                    color: #777;
                }}
                .logo {{
                    max-width: 100px;
                    height: auto;
                    display: block;
                    margin: 20px auto;
                }}
            </style>
        </head>
        <body>
            <h2>Vulnerability VanGuards</h2>
            <p>Dear {name},</p>
            <p>Your verification code is <b>{verification_code}</b>. It is valid for 5 minutes.</p>
            <p>If you did not request this code, please ignore this email.</p>
            <img src="cid:logo" alt="Company Logo" class="logo">
            <div class="footer">
                <p>&copy; {year} Vulnerability VanGuards. All rights reserved.</p>
            </div>
        </body>
        </html>
        """

        # Prepare the email content
        html_content = html_template.format(
            name=name,
            verification_code=verification_code,
            year=datetime.now().year
        )

        # Create email message
        msg = MIMEMultipart("related")
        msg['From'] = sender_email
        msg['To'] = receiver_email
        msg['Subject'] = subject

        msg.attach(MIMEText(html_content, "html"))

        # Attach logo image
        logo_path = os.path.join(os.path.dirname(__file__), 'icon.jpeg')
        with open(logo_path, 'rb') as img:
            logo = MIMEImage(img.read())
            logo.add_header("Content-ID", "<logo>")
            msg.attach(logo)

        # Send email
        context = ssl.create_default_context()
        if smtp_port == 465:
            with smtplib.SMTP_SSL(smtp_server, smtp_port, context=context) as server:
                server.login(sender_email, email_password)
                server.sendmail(sender_email, receiver_email, msg.as_string())
        elif smtp_port == 587:
            with smtplib.SMTP(smtp_server, smtp_port) as server:
                server.starttls(context=context)
                server.login(sender_email, email_password)
                server.sendmail(sender_email, receiver_email, msg.as_string())
        print("Verification email sent successfully!")
    except Exception as e:
        print(f"Error sending verification email: {e}")

def send_scan_report_email(smtp_server, smtp_port, sender_email, receiver_email, email_password, subject, body, attachment_path, username):
    try:
        # HTML template for scan report email
        html_template = """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>Scan Report</title>
            <style>
                body {{
                    font-family: Arial, sans-serif;
                    line-height: 1.6;
                    color: #333;
                    max-width: 600px;
                    margin: auto;
                    padding: 20px;
                    border: 1px solid #ddd;
                    border-radius: 10px;
                    background-color: #f9f9f9;
                }}
                h2 {{
                    color: #0056b3;
                }}
                p {{
                    margin: 0 0 15px 0;
                }}
                .footer {{
                    text-align: center;
                    font-size: 0.9em;
                    color: #777;
                }}
                .logo {{
                    max-width: 100px;
                    height: auto;
                    display: block;
                    margin: 20px auto;
                }}
            </style>
        </head>
        <body>
            <h2>Vulnerability VanGuards</h2>
            <p>Dear {username},</p>
            <p>{body}</p>
            <img src="cid:logo" alt="Company Logo" class="logo">
            <div class="footer">
                <p>&copy; {year} Vulnerability VanGuards. All rights reserved.</p>
            </div>
        </body>
        </html>
        """

        # Prepare the email content
        html_content = html_template.format(
            username=username,
            body=body,
            year=datetime.now().year
        )

        # Create email message
        msg = MIMEMultipart("related")
        msg['From'] = sender_email
        msg['To'] = receiver_email
        msg['Subject'] = subject

        msg.attach(MIMEText(html_content, "html"))

        # Attach logo image
        logo_path = os.path.join(os.path.dirname(__file__), 'icon.jpeg')
        with open(logo_path, 'rb') as img:
            logo = MIMEImage(img.read())
            logo.add_header("Content-ID", "<logo>")
            msg.attach(logo)

        # Attach the report file
        if attachment_path and os.path.exists(attachment_path):
            with open(attachment_path, 'rb') as attachment_file:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(attachment_file.read())
                encoders.encode_base64(part)
                part.add_header(
                    'Content-Disposition',
                    f'attachment; filename= {os.path.basename(attachment_path)}',
                )
                msg.attach(part)

        # Send email
        context = ssl.create_default_context()
        if smtp_port == 465:
            with smtplib.SMTP_SSL(smtp_server, smtp_port, context=context) as server:
                server.login(sender_email, email_password)
                server.sendmail(sender_email, receiver_email, msg.as_string())
        elif smtp_port == 587:
            with smtplib.SMTP(smtp_server, smtp_port) as server:
                server.starttls(context=context)
                server.login(sender_email, email_password)
                server.sendmail(sender_email, receiver_email, msg.as_string())
        print("Email sent successfully!")
    except Exception as e:
        print(f"Error sending email: {e}")
